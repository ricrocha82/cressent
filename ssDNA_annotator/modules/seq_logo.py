#!/usr/bin/env python3

import argparse
import subprocess
import os
import re

def run_command(command, error_message):
    """
    Helper function to run a shell command and handle errors.
    """
    try:
        subprocess.run(command, check=True)
        print(f"Command succeeded: {command}")
    except subprocess.CalledProcessError as e:
        print(f"{error_message}: {e}")
        exit(1)

def generate_seqlogo(seq_df, output_dir, output_name="sequence_logo.pdf",plot_title="sequence_logo",  width=10, height=10):
    """
    Generate a sequence logo using an R script.
    
    Args:
        seq_df (str): Path to the table that seqkit generated.
        output_dir (str): Directory to save the output.
        output_name (str): Name of the output PDF file (default: "tanglegram.pdf").
        plot_title (str): Title of the Sequence Logo.
        width (numeric): width of the pdf (default: 10 units) .
        height (numeric): height of the pdf (default: 5 units).

    """
    # Path to the R script
    r_script_path = "/fs/project/PAS1117/ricardo/ssDNA_tool/ssDNA_annotator/modules/seq_logo.R"  # Update with the actual path

    # Build the command
    cmd = [
        "Rscript",
        r_script_path,
        f"seq_df={seq_df}",
        f"plot_title={plot_title}",
        f"output_dir={output_dir}",
        f"output_name={output_name}",
        f"height={height}",
        f"width={width}"
    ]

    # Run the R script
    run_command(cmd, "Error making sequence logo")

def main():
    parser = argparse.ArgumentParser(description = "Generate a sequence logo from a table generated by seqkit locate.")
    parser.add_argument("-i","--seq_df", required = True, help = "Path to the table produced by seqkit.") 
    parser.add_argument("-o", "--output_dir", required = True, help = "Directory where the sequence logo will be saved.")
    parser.add_argument("-n","--output_name", default = "sequence_logo.pdf", help = "Name of the sequence logo PDF file.") 
    parser.add_argument("--plot_title", default = "sequence_logo", help = "Title of the Sequence Logo.") 
    parser.add_argument("--width", default = 10, type=float, help = "Width of the sequence logo PDF file.") 
    parser.add_argument("--height", default = 10, type=float, help = "Height of the sequence logo PDF file.") 

    args = parser.parse_args()
    
    # run R script
    generate_seqlogo(args.seq_df,  args.output_dir, output_name=args.output_name, plot_title=args.plot_title, width=args.width, height=args.height)


if __name__ == "__main__":
    main()


# /fs/project/PAS1117/ricardo/ssDNA_tool/ssDNA_annotator/modules/seq_logo.py \
#     --seq_df /fs/project/PAS1117/ricardo/ssDNA_tool/test_data/output_2/motif_positions.txt \
#     --output_dir /fs/project/PAS1117/ricardo/ssDNA_tool/test_data/output_2/ \
#     --output_name my_seq_log_test_py.pdf \
#     --plot_title test_py \
#     --height 5 \
#     --width 10

# /fs/project/PAS1117/ricardo/ssDNA_tool/ssDNA_annotator/modules/seq_logo.py \
#     --seq_df /fs/project/PAS1117/ricardo/ssDNA_tool/test_data/output_2/Anelloviridae_rep_position.txt \
#     --output_dir /fs/project/PAS1117/ricardo/ssDNA_tool/test_data/output_2/ \
#     --output_name Anelloviridae_rep_logo.pdf \
#     --plot_title AAGTATT*AC \
#     --height 5 \
#     --width 10