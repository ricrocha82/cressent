#!/usr/bin/env python3

import argparse
import subprocess
import os
import logging
from pathlib import Path
from Bio import SeqIO
import sys

def setup_logging(output_dir):
    """Set up logging to save logs in the output directory."""
    log_file = os.path.join(output_dir, "seq_logo.log")
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(log_file, mode="w"),
            logging.StreamHandler()
        ]
    )

def validate_fasta(filename):
    """Validate that a file is in FASTA format if provided."""
    if filename is None:
        return None
        
    with open(filename, "r") as handle:
        fasta = SeqIO.parse(handle, "fasta")
        if any(fasta):
            print("FASTA checked.")
            return filename
        else:
            sys.exit("Error: Input file is not in the FASTA format.\n")

def run_command(command, error_message):
    """Run a shell command and handle errors."""
    try:
        logging.info(f"Running command: {' '.join(command)}")
        subprocess.run(command, check=True)
        logging.info(f"Command succeeded")
    except subprocess.CalledProcessError as e:
        logging.error(f"{error_message}: {e}")
        exit(1)

def generate_seqlogo(fasta_file, seq_df, output_dir, output_name="sequence_logo.pdf",
                     plot_title="sequence_logo", width=10, height=10, split=False,
                     metadata=None, ncol=None, group_label=None, positions_per_row=50,
                     max_positions_single_row=100, method="prob"):
    """
    Generate a sequence logo using an R script.

    Args:
        fasta_file (str): Path to the FASTA file.
        seq_df (str): Path to the table that seqkit generated.
        output_dir (str): Directory to save the output.
        output_name (str): Name of the output PDF file.
        plot_title (str): Title of the Sequence Logo.
        width (float): Width of the PDF file.
        height (float): Height of the PDF file.
        split (bool): Whether to split by group labels.
        metadata (str): Path to the metadata file for grouping.
        ncol (int): Number of columns in the split plot.
        group_label (str): Column name in metadata for grouping sequences.
        positions_per_row (int): Number of positions per row in multi-row plots.
        max_positions_single_row (int): Maximum positions before splitting into rows.
        method (str): Method for ggseqlogo ('bits' or 'prob').
    """
    # Path to the R script
    modules_dir = Path(__file__).resolve().parent
    r_script_path = modules_dir / "seq_logo.R"

    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    logging.info(f"Output directory set to: {output_dir}")

    # Build the command
    cmd = [
        "Rscript",
        str(r_script_path),
        f"fasta_file={fasta_file if fasta_file else ''}",
        f"seq_df={seq_df if seq_df else ''}",
        f"plot_title={plot_title}",
        f"output_dir={output_dir}",
        f"output_name={output_name}",
        f"height={height}",
        f"width={width}",
        f"split={'TRUE' if split else 'FALSE'}",
        f"metadata={metadata if metadata else ''}",
        f"ncol={ncol if ncol else ''}",
        f"group_label={group_label if group_label else ''}",
        f"positions_per_row={positions_per_row}",
        f"max_positions_single_row={max_positions_single_row}",
        f"method={method}"
    ]

    # Run the R script
    run_command(cmd, "Error generating sequence logo")

def main():
    parser = argparse.ArgumentParser(description="Generate a sequence logo from a table generated by seqkit locate.")
    parser.add_argument("-i", "--input_fasta", help="Path to the fasta file.")
    parser.add_argument("-tb", "--seq_df", help="Path to the table produced by seqkit.")
    parser.add_argument("-o", "--output_dir", default=".", help="Path to the output directory (Default: working directory)")
    parser.add_argument("-n", "--output_name", default="sequence_logo.pdf", help="Name of the sequence logo (default: sequence_logo.pdf)")
    parser.add_argument("--plot_title", default="sequence_logo", help="Title of the Sequence Logo (default: sequence_logo)")
    parser.add_argument("--width", default=10, type=float, help="Width of the sequence logo (default = 10)")
    parser.add_argument("--height", default=10, type=float, help="Height of the sequence logo (default = 10)")
    parser.add_argument("--split", action="store_true", help="If set, the sequence logo will be split by group label")
    parser.add_argument("--metadata", help="Path to metadata file containing group labels.")
    parser.add_argument("--ncol", type=int, help="Number of columns when splitting the sequence logo.")
    parser.add_argument("--group_label", help="Column name in metadata for grouping sequences.")
    parser.add_argument("--positions_per_row", type=int, default=50, 
                       help="Number of positions per row when creating multi-row plots (default: 50)")
    parser.add_argument("--max_positions_single_row", type=int, default=100,
                       help="Maximum number of positions before automatically splitting into multiple rows (default: 100)")
    parser.add_argument("--method", choices=["bits", "prob"], default="prob",
                       help="Method for ggseqlogo: 'bits' for information content or 'prob' for probability (default: prob)")

    args = parser.parse_args()

    # Create output directory
    output_dir = args.output_dir
    os.makedirs(output_dir, exist_ok=True)

    # Only validate FASTA if it was provided
    input_fasta = None
    if args.input_fasta:
        input_fasta = validate_fasta(args.input_fasta)

    # Set up logging
    setup_logging(output_dir)
    logging.info("Starting sequence logo generation.")

    # Validate inputs
    if input_fasta is None and args.seq_df is None:
        logging.error("Either --input_fasta or --seq_df must be provided.")
        parser.error("Either --input_fasta or --seq_df must be provided.")

    if args.split and (args.metadata is None or args.group_label is None or args.ncol is None):
        logging.error("When using --split, --metadata, --group_label, and --ncol must be provided.")
        parser.error("When using --split, --metadata, --group_label, and --ncol must be provided.")

    if args.split and args.group_label is not None:
        logging.info(f"Splitting the figure by {args.group_label}")

    # Log multi-row parameters
    logging.info(f"Multi-row parameters: positions_per_row={args.positions_per_row}, max_positions_single_row={args.max_positions_single_row}")
    logging.info(f"ggseqlogo method: {args.method}")

    # Run R script to generate sequence logos
    generate_seqlogo(
        fasta_file=input_fasta,
        seq_df=args.seq_df,
        output_dir=args.output_dir,
        output_name=args.output_name,
        plot_title=args.plot_title,
        width=args.width,
        height=args.height,
        split=args.split,
        metadata=args.metadata,
        ncol=args.ncol,
        group_label=args.group_label,
        positions_per_row=args.positions_per_row,
        max_positions_single_row=args.max_positions_single_row,
        method=args.method
    )

    logging.info("Sequence logo generation completed successfully.")
    logging.info(f"Figure saved in: {args.output_dir}")

if __name__ == "__main__":
    main()

# Example usage with bits method:
# python seq_logo.py \
#     -tb pattern_positions.txt \
#     -o output_dir \
#     --output_name bits_logo.pdf \
#     --plot_title "Information Content Logo" \
#     --method bits \
#     --positions_per_row 50 \
#     --max_positions_single_row 100

# Example usage with probability method (default):
# python seq_logo.py \
#     -i sequences.fa \
#     -o output_dir \
#     --output_name prob_logo.pdf \
#     --method prob